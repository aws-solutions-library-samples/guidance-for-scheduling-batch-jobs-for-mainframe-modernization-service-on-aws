{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS Step Functions StateMachine Scheduler for Re-platform Batch",

  "Parameters" : {
    "M2ApplicationName": {
      "Description": "Application Id of the M2 re-platform",
      "Type": "String",
      "Default": "m2-batch-scheduler"
    },
    "S3BucketNameForM2Batch": {
      "Description": "Application Id of the M2 re-platform",
      "Type": "String",
      "Default": "m2-replatform-batch-scheduler"
    }
  },

  "Resources": {

    "M2ApplicationMicroFocus": {
      "Type": "AWS::M2::Application",
      "Properties": {
        "Name": {"Fn::Join": ["-",[{ "Ref" : "M2ApplicationName" },"app"]]},
        "EngineType": "microfocus",
        "Definition": {
          "S3Location": {"Fn::Join": ["",["s3://",{ "Ref" : "S3BucketNameForM2Batch" },"/v1/application_definition_batch_scheduler.json"]]}
        }
      }
    },

    "StepFunctionsM2SchedulerRole" : {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": ["states.amazonaws.com","scheduler.amazonaws.com"]
            },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Path": "/"
      }
    },
    "StepFunctionsM2SchedulerRolePolicies" : {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": {"Fn::Join": ["-",[{ "Ref" : "M2ApplicationName" },"policy"]]},
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "m2:GetBatchJobExecution",
                "m2:StartBatchJob"
              ],
              "Resource": {"Fn::Join": [":",["arn:aws:m2",{ "Ref" : "AWS::Region" },{ "Ref" : "AWS::AccountId" },"app/*"]]}
            },
            {
              "Effect": "Allow",
              "Action": [
                "states:StartExecution"
              ],
              "Resource": {"Fn::Join": [":",["arn:aws:states",{ "Ref" : "AWS::Region" },{ "Ref" : "AWS::AccountId" },"stateMachine:*"]]}
            },
            {
              "Effect": "Allow",
              "Action": [
                "states:DescribeExecution",
                "states:StopExecution"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "events:PutTargets",
                "events:PutRule",
                "events:DescribeRule"
              ],
              "Resource": {"Fn::Join": [":",["arn:aws:events",{ "Ref" : "AWS::Region" },{ "Ref" : "AWS::AccountId" },"rule/StepFunctionsGetEventsForStepFunctionsExecutionRule"]]}
            },
            {
              "Effect": "Allow",
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
                "xray:GetSamplingRules",
                "xray:GetSamplingTargets",
                "logs:Describe*",
                "logs:Get*",
                "logs:List*",
                "logs:StartQuery",
                "logs:StopQuery",
                "logs:TestMetricFilter",
                "logs:FilterLogEvents"
              ],
              "Resource": "*"
            }]
        },
        "Roles": [{"Ref": "StepFunctionsM2SchedulerRole"}]
      }
    },

    "M2StepFunctionsJobTemplate": {
      "Type" : "AWS::StepFunctions::StateMachine",
      "Properties" : {
        "StateMachineName": {"Fn::Join": ["-",[{ "Ref" : "M2ApplicationName" },"job-template"]]},
        "RoleArn": { "Fn::GetAtt": ["StepFunctionsM2SchedulerRole", "Arn"] },
        "Definition" :
        {
          "Comment": "A description of my state machine",
          "StartAt": "StartBatchJob",
          "States": {
            "StartBatchJob": {
              "Type": "Task",
              "Next": "Wait X Seconds",
              "Parameters": {
                "ApplicationId.$": "$.ApplicationId",
                "BatchJobIdentifier": {
                  "ScriptBatchJobIdentifier": {
                    "ScriptName.$": "States.Format('{}.JCL',$.JobName)"
                  }
                }
              },
              "Resource": "arn:aws:states:::aws-sdk:m2:startBatchJob",
              "ResultPath": "$.ExecutionId"
            },
            "Wait X Seconds": {
              "Type": "Wait",
              "Next": "GetBatchJobExecution",
              "Seconds": 5
            },
            "GetBatchJobExecution": {
              "Type": "Task",
              "Next": "Job Complete?",
              "Parameters": {
                "ApplicationId.$": "$.ApplicationId",
                "ExecutionId.$": "$.ExecutionId.ExecutionId"
              },
              "Resource": "arn:aws:states:::aws-sdk:m2:getBatchJobExecution"
            },
            "Job Complete?": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.Status",
                  "StringEquals": "Failed",
                  "Next": "Wait For logs Failed"
                },
                {
                  "Or": [
                    {
                      "Variable": "$.Status",
                      "StringEquals": "Succeeded"
                    },
                    {
                      "Variable": "$.Status",
                      "StringEquals": "Succeeded With Warning"
                    }
                  ],
                  "Next": "Wait For logs"
                }
              ],
              "Default": "Wait X Seconds Loop"
            },
            "Wait For logs": {
              "Type": "Wait",
              "Seconds": 15,
              "Next": "GetLogEventsSuccess"
            },
            "Wait X Seconds Loop": {
              "Type": "Wait",
              "Next": "GetBatchJobExecution Loop",
              "Seconds": 5
            },
            "GetBatchJobExecution Loop": {
              "Type": "Task",
              "Next": "Choice",
              "Parameters": {
                "ApplicationId.$": "$.ApplicationId",
                "ExecutionId.$": "$.ExecutionId"
              },
              "Resource": "arn:aws:states:::aws-sdk:m2:getBatchJobExecution"
            },
            "Choice": {
              "Type": "Choice",
              "Choices": [
                {
                  "Or": [
                    {
                      "Variable": "$.Status",
                      "StringEquals": "Succeeded"
                    },
                    {
                      "Variable": "$.Status",
                      "StringEquals": "Succeeded With Warning"
                    }
                  ],
                  "Next": "Wait For logs"
                },
                {
                  "Variable": "$.Status",
                  "StringEquals": "Failed",
                  "Next": "Wait For logs Failed"
                }
              ],
              "Default": "Wait X Seconds Loop"
            },
            "Wait For logs Failed": {
              "Type": "Wait",
              "Seconds": 15,
              "Next": "GetLogEvents Failed"
            },
            "GetLogEventsSuccess": {
              "Type": "Task",
              "Next": "Success",
              "Parameters": {
                "LogGroupName.$": "States.Format('/aws/vendedlogs/m2/{}/BatchJobLogs',$.ApplicationId)",
                "LogStreamName.$": "States.Format('{}/{}/{}/PS010/SYSOUT',$.ExecutionId,$.JobId,$.JobName)"
              },
              "Resource": "arn:aws:states:::aws-sdk:cloudwatchlogs:getLogEvents",
              "OutputPath": "$.Events[0:].Message",
              "Retry": [
                {
                  "ErrorEquals": [
                    "States.TaskFailed"
                  ],
                  "BackoffRate": 5,
                  "IntervalSeconds": 10,
                  "MaxAttempts": 2
                }
              ]
            },
            "GetLogEvents Failed": {
              "Type": "Task",
              "Next": "Fail",
              "Parameters": {
                "LogGroupName.$": "States.Format('/aws/vendedlogs/m2/{}/BatchJobLogs',$.ApplicationId)",
                "LogStreamName.$": "States.Format('{}/{}/{}/PS010/SYSOUT',$.ExecutionId,$.JobId,$.JobName)"
              },
              "Resource": "arn:aws:states:::aws-sdk:cloudwatchlogs:getLogEvents",
              "OutputPath": "$.Events[0:].Message"
            },
            "Success": {
              "Type": "Succeed"
            },
            "Fail": {
              "Type": "Fail"
            }
          }
        }
        }
    },
    "M2StepFunctionScheduler": {
      "Type" : "AWS::StepFunctions::StateMachine",
      "Properties" : {
        "StateMachineName": {"Fn::Join": ["-",[{ "Ref" : "M2ApplicationName" },"job-scheduler-flow"]]},
        "RoleArn": { "Fn::GetAtt": ["StepFunctionsM2SchedulerRole", "Arn"] },
        "Definition" :{
          "Comment": "A description of my state machine",
          "StartAt": "BATCHA00",
          "States": {
            "BATCHA00": {
              "Type": "Task",
              "Resource": "arn:aws:states:::states:startExecution.sync:2",
              "Parameters": {
                "StateMachineArn": { "Fn::GetAtt": ["M2StepFunctionsJobTemplate", "Arn"] },
                "Input": {
                  "ApplicationId": { "Fn::GetAtt" : [ "M2ApplicationMicroFocus", "ApplicationId" ]},
                  "JobName": "BATCHA00"
                }
              },
              "Next": "BATCHB00"
            },
            "BATCHB00": {
              "Type": "Task",
              "Resource": "arn:aws:states:::states:startExecution.sync:2",
              "Parameters": {
                "StateMachineArn": { "Fn::GetAtt": ["M2StepFunctionsJobTemplate", "Arn"] },
                "Input": {
                  "ApplicationId": { "Fn::GetAtt" : [ "M2ApplicationMicroFocus", "ApplicationId" ]},
                  "JobName": "BATCHB00"
                }
              },
              "Next": "Parallel"
            },
            "Parallel": {
              "Type": "Parallel",
              "Branches": [
                {
                  "StartAt": "BATCHA04",
                  "States": {
                    "BATCHA04": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::states:startExecution.sync:2",
                      "Parameters": {
                        "StateMachineArn": { "Fn::GetAtt": ["M2StepFunctionsJobTemplate", "Arn"] },
                        "Input": {
                          "ApplicationId": { "Fn::GetAtt" : [ "M2ApplicationMicroFocus", "ApplicationId" ]},
                          "JobName": "BATCHA04"
                        }
                      },
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "BATCHB04",
                  "States": {
                    "BATCHB04": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::states:startExecution.sync:2",
                      "Parameters": {
                        "StateMachineArn": { "Fn::GetAtt": ["M2StepFunctionsJobTemplate", "Arn"] },
                        "Input": {
                          "ApplicationId": { "Fn::GetAtt" : [ "M2ApplicationMicroFocus", "ApplicationId" ]},
                          "JobName": "BATCHB04"
                        }
                      },
                      "End": true
                    }
                  }
                }
              ],
              "Next": "BATCHC00"
            },
            "BATCHC00": {
              "Type": "Task",
              "Resource": "arn:aws:states:::states:startExecution.sync:2",
              "Parameters": {
                "StateMachineArn": { "Fn::GetAtt": ["M2StepFunctionsJobTemplate", "Arn"] },
                "Input": {
                  "ApplicationId": { "Fn::GetAtt" : [ "M2ApplicationMicroFocus", "ApplicationId" ]},
                  "JobName": "BATCHC00"
                }
              },
              "End": true
            }
          }
        }
        }
    },

    "M2EventBridgeJobTrigger": {
      "Type" : "AWS::Scheduler::Schedule",
      "Properties" : {
        "Description" : "Time trigger for Batch Job Flow",
        "FlexibleTimeWindow" : { "Mode" : "OFF" },
        "ScheduleExpression" : "at(2023-04-26T00:05:00)",
        "ScheduleExpressionTimezone" : "America/New_York",
        "State" : "ENABLED",
        "Target" : {
          "Arn": { "Fn::GetAtt" : [ "M2StepFunctionScheduler", "Arn" ]},
          "RoleArn" : { "Fn::GetAtt": ["StepFunctionsM2SchedulerRole", "Arn"] }
        }
      }
    }
},
  "Outputs" : {
    "M2ApplicationId" : {
      "Description" : "M2 Application Id",
      "Value" :  { "Fn::GetAtt" : [ "M2ApplicationMicroFocus", "ApplicationId" ]}
    },
    "StepFunctionsSchedulerFlowName" : {
      "Description" : "Step Functions Scheduler Flow Name",
      "Value" :  { "Fn::GetAtt" : [ "M2StepFunctionScheduler", "Name" ]}
    }
  }
}