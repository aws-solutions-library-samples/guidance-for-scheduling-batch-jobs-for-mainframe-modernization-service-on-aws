AWSTemplateFormatVersion: "2010-09-09"

Description: 'M2 Batch Scheduler using Amazon EventBridge and AWS Step Functions'

Parameters:
  M2ApplicationName:
    Description: 'Name of the M2 re-platform Application'
    Type: String
    Default: m2-batch-scheduler

  S3BucketNameForM2Batch:
    Description: 'S3 Bucket Name where the Microfocus recompiled artifacts are stored'
    Type: String
    Default: 'm2-replatform-batch-scheduler'

  S3BucketAppKeyForM2Batch:
    Description: 'S3 application Key and version'
    Default: 'v1'
    Type: String

  JclKey:
    Description: 'S3 JCL folder Name'
    Default: 'jcls'
    Type: String

  Tn3270Port:
    Description: 'M2 TN3270 port'
    Default: 7000
    Type: Number

Resources:
  M2Database:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: "100"
      DBInstanceClass: db.t3.micro
      Engine: postgres
      MasterUsername: !Sub "{{resolve:secretsmanager:${M2DbSecret}::username}}"
      MasterUserPassword: !Sub "{{resolve:secretsmanager:${M2DbSecret}::password}}"
      ManageMasterUserPassword: false
      PubliclyAccessible: false
      BackupRetentionPeriod: 0

  M2DbKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: 'M2 Database Secret Key'
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Id:
          Ref: AWS::StackName
        Statement:
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS:
                Fn::Sub: arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource: '*'
          - Effect: Allow
            Principal:
              Service: m2.amazonaws.com
            Action: kms:Decrypt
            Resource: '*'
  M2DbSecret:
    Type: AWS::SecretsManager::Secret
    DeletionPolicy: Delete
    Properties:
      Description: 'Secret for M2 database'
      KmsKeyId: !GetAtt M2DbKMSKey.Arn
      GenerateSecretString:
        SecretStringTemplate: '{"username": "dbadmin"}'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludePunctuation: true

  M2DbSecretTargetAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    DeletionPolicy: Delete
    Properties:
      TargetType: 'AWS::RDS::DBInstance'
      SecretId: !Ref M2DbSecret
      TargetId: !Ref M2Database

  M2SecretResourcePolicy:
    Type: AWS::SecretsManager::ResourcePolicy
    Properties:
      BlockPublicPolicy: "True"
      SecretId:
        Ref: M2DbSecret
      ResourcePolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: m2.amazonaws.com
            Action: secretsmanager:GetSecretValue
            Resource: '*'

  M2AppDef:
    Type: AWS::SSM::Parameter
    DeletionPolicy: Delete
    Properties:
      Type: 'String'
      Value: !Sub |
        {
         "template-version": "2.0",
         "source-locations": [
            {
                "source-id": "s3-source",
                "source-type": "s3",
                "properties": {
                    "s3-bucket": "${S3BucketNameForM2Batch}",
                    "s3-key-prefix": "${S3BucketAppKeyForM2Batch}"
                }
            }
          ],
          "definition" : {
            "listeners": [
              {
                "port": ${Tn3270Port},
                "type": "tn3270"
              }
            ],
            "dataset-location": {
              "db-locations": [
                {
                  "name": "DatabaseM2",
                  "secret-manager-arn": "${M2DbSecret}"
                }
              ]
            },
            "batch-settings": {
                "initiators": [{
                    "classes": ["A", "B"],
                    "description": "batch initiators for classes A & B"
                }],
                "jcl-file-location": "${!s3-source}/${JclKey}"
            }
          }
        }

  M2EnvironmentMicroFocus:
    Type: AWS::M2::Environment
    Properties:
      Description: 'Re-platform environment for M2 Application'
      Name:
        Fn::Join:
          - '-'
          - - Ref: M2ApplicationName
            - m2-env
            - !GetAtt UniqueSuffix.Value
      EngineType: microfocus
      InstanceType: M2.m5.large

  M2ApplicationMicroFocus:
    Type: AWS::M2::Application
    Properties:
      Description: 'M2 Application'
      Name:
        Fn::Join:
          - '-'
          - - Ref: M2ApplicationName
            - m2-app
            - !GetAtt UniqueSuffix.Value
      EngineType: microfocus
      Definition:
        Content: !GetAtt M2AppDef.Value

  StepFunctionsM2SchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      Description: 'IAM policy of Step Functions'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
                - scheduler.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
  StepFunctionsM2SchedulerRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        Fn::Join:
          - '-'
          - - Ref: M2ApplicationName
            - policy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - m2:GetBatchJobExecution
              - m2:StartBatchJob
            Resource:
              Fn::Join:
                - ':'
                - - arn:aws:m2
                  - Ref: AWS::Region
                  - Ref: AWS::AccountId
                  - app/*
          - Effect: Allow
            Action:
              - states:StartExecution
            Resource:
              Fn::Join:
                - ':'
                - - arn:aws:states
                  - Ref: AWS::Region
                  - Ref: AWS::AccountId
                  - stateMachine:*
          - Effect: Allow
            Action:
              - states:DescribeExecution
              - states:StopExecution
            Resource: '*'
          - Effect: Allow
            Action:
              - events:PutTargets
              - events:PutRule
              - events:DescribeRule
            Resource:
              Fn::Join:
                - ':'
                - - arn:aws:events
                  - Ref: AWS::Region
                  - Ref: AWS::AccountId
                  - rule/StepFunctionsGetEventsForStepFunctionsExecutionRule
          - Effect: Allow
            Action:
              - xray:PutTraceSegments
              - xray:PutTelemetryRecords
              - xray:GetSamplingRules
              - xray:GetSamplingTargets
              - logs:Describe*
              - logs:Get*
              - logs:List*
              - logs:StartQuery
              - logs:StopQuery
              - logs:TestMetricFilter
              - logs:FilterLogEvents
            Resource: '*'
      Roles:
        - Ref: StepFunctionsM2SchedulerRole

  M2StepFunctionsJobTemplate:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName:
        Fn::Join:
          - '-'
          - - Ref: M2ApplicationName
            - job-template
            - !GetAtt UniqueSuffix.Value
      RoleArn:
        Fn::GetAtt:
          - StepFunctionsM2SchedulerRole
          - Arn
      Definition:
        Comment: A description of my state machine
        StartAt: StartBatchJob
        States:
          StartBatchJob:
            Type: Task
            Next: Wait X Seconds
            Parameters:
              ApplicationId.$: $.ApplicationId
              BatchJobIdentifier:
                ScriptBatchJobIdentifier:
                  ScriptName.$: States.Format('{}.JCL',$.JobName)
            Resource: arn:aws:states:::aws-sdk:m2:startBatchJob
            ResultPath: $.ExecutionId
          Wait X Seconds:
            Type: Wait
            Next: GetBatchJobExecution
            Seconds: 5
          GetBatchJobExecution:
            Type: Task
            Next: Job Complete?
            Parameters:
              ApplicationId.$: $.ApplicationId
              ExecutionId.$: $.ExecutionId.ExecutionId
            Resource: arn:aws:states:::aws-sdk:m2:getBatchJobExecution
          Job Complete?:
            Type: Choice
            Choices:
              - Variable: $.Status
                StringEquals: Failed
                Next: Wait For logs Failed
              - Or:
                  - Variable: $.Status
                    StringEquals: Succeeded
                  - Variable: $.Status
                    StringEquals: Succeeded With Warning
                Next: Wait For logs
            Default: Wait X Seconds Loop
          Wait For logs:
            Type: Wait
            Seconds: 15
            Next: GetLogEventsSuccess
          Wait X Seconds Loop:
            Type: Wait
            Next: GetBatchJobExecution Loop
            Seconds: 5
          GetBatchJobExecution Loop:
            Type: Task
            Next: Choice
            Parameters:
              ApplicationId.$: $.ApplicationId
              ExecutionId.$: $.ExecutionId
            Resource: arn:aws:states:::aws-sdk:m2:getBatchJobExecution
          Choice:
            Type: Choice
            Choices:
              - Or:
                  - Variable: $.Status
                    StringEquals: Succeeded
                  - Variable: $.Status
                    StringEquals: Succeeded With Warning
                Next: Wait For logs
              - Variable: $.Status
                StringEquals: Failed
                Next: Wait For logs Failed
            Default: Wait X Seconds Loop
          Wait For logs Failed:
            Type: Wait
            Seconds: 15
            Next: GetLogEvents Failed
          GetLogEventsSuccess:
            Type: Task
            Next: Success
            Parameters:
              LogGroupName.$: States.Format('/aws/vendedlogs/m2/{}/BatchJobLogs',$.ApplicationId)
              LogStreamName.$: States.Format('{}/{}/{}/PS010/SYSOUT',$.ExecutionId,$.JobId,$.JobName)
            Resource: arn:aws:states:::aws-sdk:cloudwatchlogs:getLogEvents
            OutputPath: $.Events[0:].Message
            Retry:
              - ErrorEquals:
                  - States.TaskFailed
                BackoffRate: 5
                IntervalSeconds: 10
                MaxAttempts: 2
          GetLogEvents Failed:
            Type: Task
            Next: Fail
            Parameters:
              LogGroupName.$: States.Format('/aws/vendedlogs/m2/{}/BatchJobLogs',$.ApplicationId)
              LogStreamName.$: States.Format('{}/{}/{}/PS010/SYSOUT',$.ExecutionId,$.JobId,$.JobName)
            Resource: arn:aws:states:::aws-sdk:cloudwatchlogs:getLogEvents
            OutputPath: $.Events[0:].Message
          Success:
            Type: Succeed
          Fail:
            Type: Fail

  M2StepFunctionScheduler:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName:
        Fn::Join:
          - '-'
          - - Ref: M2ApplicationName
            - job-scheduler-flow
            - !GetAtt UniqueSuffix.Value
      RoleArn:
        Fn::GetAtt:
          - StepFunctionsM2SchedulerRole
          - Arn
      Definition:
        Comment: A description of my state machine
        StartAt: BATCHA00
        States:
          BATCHA00:
            Type: Task
            Resource: arn:aws:states:::states:startExecution.sync:2
            Parameters:
              StateMachineArn:
                Fn::GetAtt:
                  - M2StepFunctionsJobTemplate
                  - Arn
              Input:
                ApplicationId:
                  Fn::GetAtt:
                    - M2ApplicationMicroFocus
                    - ApplicationId
                JobName: BATCHA00
            Next: BATCHB00
          BATCHB00:
            Type: Task
            Resource: arn:aws:states:::states:startExecution.sync:2
            Parameters:
              StateMachineArn:
                Fn::GetAtt:
                  - M2StepFunctionsJobTemplate
                  - Arn
              Input:
                ApplicationId:
                  Fn::GetAtt:
                    - M2ApplicationMicroFocus
                    - ApplicationId
                JobName: BATCHB00
            Next: Parallel
          Parallel:
            Type: Parallel
            Branches:
              - StartAt: BATCHA04
                States:
                  BATCHA04:
                    Type: Task
                    Resource: arn:aws:states:::states:startExecution.sync:2
                    Parameters:
                      StateMachineArn:
                        Fn::GetAtt:
                          - M2StepFunctionsJobTemplate
                          - Arn
                      Input:
                        ApplicationId:
                          Fn::GetAtt:
                            - M2ApplicationMicroFocus
                            - ApplicationId
                        JobName: BATCHA04
                    End: true
              - StartAt: BATCHB04
                States:
                  BATCHB04:
                    Type: Task
                    Resource: arn:aws:states:::states:startExecution.sync:2
                    Parameters:
                      StateMachineArn:
                        Fn::GetAtt:
                          - M2StepFunctionsJobTemplate
                          - Arn
                      Input:
                        ApplicationId:
                          Fn::GetAtt:
                            - M2ApplicationMicroFocus
                            - ApplicationId
                        JobName: BATCHB04
                    End: true
            Next: BATCHC00
          BATCHC00:
            Type: Task
            Resource: arn:aws:states:::states:startExecution.sync:2
            Parameters:
              StateMachineArn:
                Fn::GetAtt:
                  - M2StepFunctionsJobTemplate
                  - Arn
              Input:
                ApplicationId:
                  Fn::GetAtt:
                    - M2ApplicationMicroFocus
                    - ApplicationId
                JobName: BATCHC00
            End: true

  M2EventBridgeJobTrigger:
    Type: AWS::Scheduler::Schedule
    Properties:
      Description: 'Time trigger for M2 Batch Job Flow'
      FlexibleTimeWindow:
        Mode: 'OFF'
      ScheduleExpression: at(2023-01-01T01:01:00)
      ScheduleExpressionTimezone: America/New_York
      State: DISABLED
      Target:
        Arn:
          Fn::GetAtt:
            - M2StepFunctionScheduler
            - Arn
        RoleArn:
          Fn::GetAtt:
            - StepFunctionsM2SchedulerRole
            - Arn

  UniqueSuffix:
    Type: AWS::SSM::Parameter
    DeletionPolicy: Delete
    Properties:
      Type: 'String'
      Value: !Select [0, !Split ['-', !Select [2, !Split [/, !Ref AWS::StackId ]]]]

  M2Name:
    Type: AWS::SSM::Parameter
    DeletionPolicy: Delete
    Properties:
      Type: 'String'
      Value: !Join
        - '-'
        -  - !Ref M2ApplicationName
           - !GetAtt UniqueSuffix.Value

Outputs:
  M2ApplicationId:
    Description: M2 Application Id
    Value:
      Fn::GetAtt:
        - M2ApplicationMicroFocus
        - ApplicationId

  M2EnvironmentId:
    Description: 'm2 environment id'
    Value: !GetAtt M2EnvironmentMicroFocus.EnvironmentId

  StepFunctionsSchedulerFlowName:
    Description: Step Functions Scheduler Flow Name
    Value:
      Fn::GetAtt:
        - M2StepFunctionScheduler
        - Name

  M2AppDef:
    Description: 'm2 app def'
    Value: !GetAtt M2AppDef.Value

