AWSTemplateFormatVersion: "2010-09-09"

Description: 'M2 Batch Scheduler using Amazon EventBridge and AWS Step Functions'

Parameters:

  M2ApplicationName:
    Description: 'name of the m2 re-platform application'
    Default: 'm2-batch-scheduler'
    Type: String

  DbName:
    Description: 'm2 db name'
    Default: 'MfBaseAppDb'
    Type: String

  InstanceType:
    Description: 'm2 instance type'
    Default: 'M2.m5.large'
    Type: String

  AppKey:
    Description: 's3 app key'
    Default: 'v1'
    Type: String

  JclKey:
    Description: 's3 jcl folder key'
    Default: 'jcls'
    Type: String

  BucketName:
    Description: 'bucket name'
    Type: String
    Default: 'm2-replatform-batch-scheduler'

  VpcCidrBlock:
    Description: 'vpc cidr block'
    Type: String
    Default: '10.0.0.0/16'

  Tn3270Port:
    Description: 'm2 tn3270 port'
    Default: 7000
    Type: Number

  PostgresPort:
    Description: 'm2 postgres port'
    Default: 5432
    Type: Number

Resources:

  M2EnvironmentMicrofocus:
    Type: AWS::M2::Environment
    DeletionPolicy: Delete
    DependsOn:
      - M2Subnet1
      - M2Subnet2
    Properties:
      Name: !GetAtt M2Name.Value
      Description: !Join
        - ' '
        -  - 'm2 environment:'
           - !GetAtt M2Name.Value
      PreferredMaintenanceWindow: 'sun:00:00-sun:01:00'
      EngineType: microfocus
      InstanceType: !Ref InstanceType
      PubliclyAccessible: true
      SubnetIds:
        - !Ref M2Subnet1
        - !Ref M2Subnet2
      SecurityGroupIds:
        - !GetAtt M2VpcSecGroup.GroupId
      Tags:
        'env-name': !GetAtt M2Name.Value

  M2ApplicationMicroFocus:
    Type: AWS::M2::Application
    DeletionPolicy: Delete
    DependsOn: M2DbCluster
    Properties:
      Name: !GetAtt M2Name.Value
      Description: !Join
        - ' '
        -  - 'm2 application:'
           - !GetAtt M2Name.Value
      EngineType: microfocus
      Definition:
        Content: !GetAtt M2AppDef.Value
      Tags:
        'app-name': !GetAtt M2Name.Value

  M2AppDef:
    Type: AWS::SSM::Parameter
    DeletionPolicy: Delete
    Properties:
      Type: 'String'
      Value: !Sub |
        {
         "template-version": "2.0",
         "source-locations": [
            {
                "source-id": "s3-source",
                "source-type": "s3",
                "properties": {
                    "s3-bucket": "${BucketName}",
                    "s3-key-prefix": "${AppKey}"
                }
            }
          ],
          "definition" : {
            "listeners": [
              {
                "port": ${Tn3270Port},
                "type": "tn3270"
              }
            ],
            "dataset-location": {
              "db-locations": [
                {
                  "name": "${M2DbName.Value}",
                  "secret-manager-arn": "${M2DbSecret}"
                }
              ]
            },
            "batch-settings": {
                "initiators": [{
                    "classes": ["A", "B"],
                    "description": "batch initiators for classes A & B"
                }],
                "jcl-file-location": "${!s3-source}/${JclKey}"
            }
          }
        }

  M2DbCluster:
    Type: AWS::RDS::DBCluster
    DeletionPolicy: Delete
    Properties:
      DatabaseName: !GetAtt M2DbName.Value
      Port: !Ref PostgresPort
      DBClusterParameterGroupName: !Ref M2DbClusterParameterGroup
      MasterUsername: !Sub "{{resolve:secretsmanager:${M2DbSecret}::username}}"
      MasterUserPassword: !Sub "{{resolve:secretsmanager:${M2DbSecret}::password}}"
      Engine: 'aurora-postgresql'
      EngineVersion: 14.6
      ServerlessV2ScalingConfiguration:
        MinCapacity: 2
        MaxCapacity: 8
      VpcSecurityGroupIds:
        - !GetAtt M2VpcSecGroup.GroupId
      DBSubnetGroupName: !Ref M2DBSubnetGroup
      DeletionProtection: false
      EnableIAMDatabaseAuthentication: true
      StorageEncrypted: true

  M2DbInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      Engine: aurora-postgresql
      DBInstanceClass: db.serverless
      DBClusterIdentifier: !Ref M2DbCluster
      PubliclyAccessible: false
      MonitoringInterval: 15
      MonitoringRoleArn: !GetAtt StepFunctionsM2SchedulerRole.Arn

  M2DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    DeletionPolicy: Delete
    Properties:
      DBSubnetGroupDescription: 'subnet group for db cluster'
      SubnetIds:
        - !Ref M2Subnet1
        - !Ref M2Subnet2

  M2DbClusterParameterGroup:
    Type: AWS::RDS::DBClusterParameterGroup
    DeletionPolicy: Delete
    Properties:
      Description: 'parameter group for m2 db cluster'
      Family: 'aurora-postgresql14'
      Parameters:
        max_prepared_transactions: 100

  M2DbSecret:
    Type: AWS::SecretsManager::Secret
    DeletionPolicy: Delete
    Properties:
      Description: 'database credentials for m2 app'
      KmsKeyId: !GetAtt M2KmsKey.Arn
      GenerateSecretString:
        SecretStringTemplate: '{"username": "dbadmin"}'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludePunctuation: true

  M2DbSecretTargetAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    DeletionPolicy: Delete
    Properties:
      TargetType: 'AWS::RDS::DBCluster'
      SecretId: !Ref M2DbSecret
      TargetId: !Ref M2DbCluster

  M2DbSecretResourcePolicy:
    Type: AWS::SecretsManager::ResourcePolicy
    DeletionPolicy: Delete
    Properties:
      SecretId: !Ref M2DbSecret
      ResourcePolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'm2.amazonaws.com'
            Action: 'secretsmanager:GetSecretValue'
            Resource: !Ref M2DbSecret

  M2KmsKey:
    Type: AWS::KMS::Key
    DeletionPolicy: Delete
    Properties:
      Description: 'symmetric key for m2 secret'
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: 'Allow'
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: 'kms:*'
            Resource: "*"
          - Effect: 'Allow'
            Principal:
              Service: 'm2.amazonaws.com'
            Action: 'kms:Decrypt'
            Resource: '*'
          - Effect: 'Allow'
            Principal:
              Service: !Sub logs.${AWS::Region}.amazonaws.com
            Action: 'kms:*'
            Resource: '*'

  M2VpcSecGroup:
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: Delete
    Properties:
      VpcId: !Ref M2Vpc
      GroupDescription: 'security group for vpc'
      SecurityGroupEgress:
        - IpProtocol: tcp
          CidrIp: '0.0.0.0/0'
          FromPort: 5432
          ToPort: 5432
          Description: 'Allow outbound access within VPC'
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: !GetAtt M2Vpc.CidrBlock
          FromPort: 0
          ToPort: 65335
          Description: 'Allow on-vpc inbound access'
        - IpProtocol: tcp
          CidrIp: '0.0.0.0/0'
          FromPort: !Ref Tn3270Port
          ToPort: !Ref Tn3270Port
          Description: 'Allow inbound tn3270 access'
  M2Vpc:
    Type: AWS::EC2::VPC
    DeletionPolicy: Delete
    DependsOn: M2Igw
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'

  M2Subnet1:
    Type: AWS::EC2::Subnet
    DeletionPolicy: Delete
    Properties:
      VpcId: !Ref M2Vpc
      AvailabilityZone: !Select
        - 0
        - !GetAZs ""
      CidrBlock: !GetAtt M2Subnet1CidrBlock.Value
      MapPublicIpOnLaunch: false

  M2Subnet2:
    Type: AWS::EC2::Subnet
    DeletionPolicy: Delete
    Properties:
      VpcId: !Ref M2Vpc
      AvailabilityZone: !Select
        - 1
        - !GetAZs ""
      CidrBlock: !GetAtt M2Subnet2CidrBlock.Value
      MapPublicIpOnLaunch: false

  M2Igw:
    Type: AWS::EC2::InternetGateway
    DeletionPolicy: Delete

  M2IgwAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DeletionPolicy: Delete
    Properties:
      VpcId: !Ref M2Vpc
      InternetGatewayId: !Ref M2Igw

  M2RouteTable:
    Type: AWS::EC2::RouteTable
    DeletionPolicy: Delete
    DependsOn:
      - M2Igw
      - M2IgwAttachment
    Properties:
      VpcId: !Ref M2Vpc

  M2Route:
    Type: AWS::EC2::Route
    DeletionPolicy: Delete
    DependsOn:
      - M2Igw
      - M2IgwAttachment
    Properties:
      RouteTableId: !Ref M2RouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref M2Igw

  M2Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DeletionPolicy: Delete
    Properties:
      SubnetId: !Ref M2Subnet1
      RouteTableId: !Ref M2RouteTable

  M2Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DeletionPolicy: Delete
    Properties:
      SubnetId: !Ref  M2Subnet2
      RouteTableId: !Ref M2RouteTable

  UniqueSuffix:
    Type: AWS::SSM::Parameter
    DeletionPolicy: Delete
    Properties:
      Type: 'String'
      Value: !Select [0, !Split ['-', !Select [2, !Split [/, !Ref AWS::StackId ]]]]

  M2Name:
    Type: AWS::SSM::Parameter
    DeletionPolicy: Delete
    Properties:
      Type: 'String'
      Value: !Join
        - '-'
        -  - !Ref M2ApplicationName
           - !GetAtt UniqueSuffix.Value

  M2DbName:
    Type: AWS::SSM::Parameter
    DeletionPolicy: Delete
    Properties:
      Type: 'String'
      Value: !Join
        - ''
        -  - !Ref DbName
           - !GetAtt UniqueSuffix.Value

  M2Subnet1CidrBlock:
    Type: AWS::SSM::Parameter
    DeletionPolicy: Delete
    Properties:
      Type: 'String'
      Value: !Select
        - 0
        - Fn::Cidr:
            - !Ref VpcCidrBlock
            - 2
            - 8

  M2Subnet2CidrBlock:
    Type: AWS::SSM::Parameter
    DeletionPolicy: Delete
    Properties:
      Type: 'String'
      Value: !Select
        - 1
        - Fn::Cidr:
            - !Ref VpcCidrBlock
            - 2
            - 8

  M2BatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      KmsKeyId: !GetAtt M2KmsKey.Arn
      LogGroupName: /aws/vendedlogs


  M2VpcFlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt StepFunctionsM2SchedulerRole.Arn
      LogGroupName: !Ref M2BatchLogGroup
      ResourceId: !Ref M2Vpc
      ResourceType: VPC
      TrafficType: ALL

  StepFunctionsM2SchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      Description: 'IAM role for Step Functions'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
                - scheduler.amazonaws.com
                - monitoring.rds.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /

  StepFunctionsM2SchedulerRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        Fn::Join:
          - '-'
          - - Ref: M2ApplicationName
            - policy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - m2:GetBatchJobExecution
              - m2:StartBatchJob
            Resource:
              Fn::Join:
                - ':'
                - - arn:aws:m2
                  - Ref: AWS::Region
                  - Ref: AWS::AccountId
                  - Fn::Join:
                      - '/'
                      - - app
                        - !GetAtt M2ApplicationMicroFocus.ApplicationId
          - Effect: Allow
            Action:
              - states:StartExecution
            Resource:
              Fn::Join:
                - ':'
                - - arn:aws:states
                  - Ref: AWS::Region
                  - Ref: AWS::AccountId
                  - stateMachine:*
          - Effect: Allow
            Action:
              - states:DescribeExecution
              - states:StopExecution
            Resource:
              - Fn::Join:
                  - ':'
                  - - arn:aws:states
                    - Ref: AWS::Region
                    - Ref: AWS::AccountId
                    - execution:*
              - Fn::Join:
                  - ':'
                  - - arn:aws:states
                    - Ref: AWS::Region
                    - Ref: AWS::AccountId
                    - express:*
          - Effect: Allow
            Action:
              - events:PutTargets
              - events:PutRule
              - events:DescribeRule
            Resource:
              Fn::Join:
                - ':'
                - - arn:aws:events
                  - Ref: AWS::Region
                  - Ref: AWS::AccountId
                  - rule/StepFunctionsGetEventsForStepFunctionsExecutionRule
          - Effect: Allow
            Action:
              - xray:PutTraceSegments
              - xray:PutTelemetryRecords
              - xray:GetSamplingRules
              - xray:GetSamplingTargets
              - logs:StartQuery
              - logs:StopQuery
              - logs:TestMetricFilter
              - logs:FilterLogEvents
              - logs:CreateLogDelivery
              - logs:CreateLogStream
              - logs:GetLogDelivery
              - logs:UpdateLogDelivery
              - logs:DeleteLogDelivery
              - logs:ListLogDeliveries
              - logs:PutLogEvents
              - logs:PutResourcePolicy
              - logs:DescribeResourcePolicies
              - logs:DescribeLogGroups
              - logs:CreateLogGroup
              - logs:PutRetentionPolicy
              - logs:DescribeLogStreams
              - logs:GetLogEvents
            Resource: '*'
      Roles:
        - Ref: StepFunctionsM2SchedulerRole

  M2StepFunctionsJobTemplate:
    Type: AWS::StepFunctions::StateMachine
    DependsOn:
      - StepFunctionsM2SchedulerRolePolicies
      - StepFunctionsM2SchedulerRole
    Properties:
      StateMachineName:
        Fn::Join:
          - '-'
          - - Ref: M2ApplicationName
            - job-template
            - !GetAtt UniqueSuffix.Value
      RoleArn:
        Fn::GetAtt:
          - StepFunctionsM2SchedulerRole
          - Arn
      Definition:
        Comment: A description of my state machine
        StartAt: StartBatchJob
        States:
          StartBatchJob:
            Type: Task
            Next: Wait X Seconds
            Parameters:
              ApplicationId.$: $.ApplicationId
              BatchJobIdentifier:
                ScriptBatchJobIdentifier:
                  ScriptName.$: States.Format('{}.JCL',$.JobName)
            Resource: arn:aws:states:::aws-sdk:m2:startBatchJob
            ResultPath: $.ExecutionId
          Wait X Seconds:
            Type: Wait
            Next: GetBatchJobExecution
            Seconds: 5
          GetBatchJobExecution:
            Type: Task
            Next: Job Complete?
            Parameters:
              ApplicationId.$: $.ApplicationId
              ExecutionId.$: $.ExecutionId.ExecutionId
            Resource: arn:aws:states:::aws-sdk:m2:getBatchJobExecution
          Job Complete?:
            Type: Choice
            Choices:
              - Variable: $.Status
                StringEquals: Failed
                Next: Wait For logs Failed
              - Or:
                  - Variable: $.Status
                    StringEquals: Succeeded
                  - Variable: $.Status
                    StringEquals: Succeeded With Warning
                Next: Wait For logs
            Default: Wait X Seconds Loop
          Wait For logs:
            Type: Wait
            Seconds: 15
            Next: GetLogEventsSuccess
          Wait X Seconds Loop:
            Type: Wait
            Next: GetBatchJobExecution Loop
            Seconds: 5
          GetBatchJobExecution Loop:
            Type: Task
            Next: Choice
            Parameters:
              ApplicationId.$: $.ApplicationId
              ExecutionId.$: $.ExecutionId
            Resource: arn:aws:states:::aws-sdk:m2:getBatchJobExecution
          Choice:
            Type: Choice
            Choices:
              - Or:
                  - Variable: $.Status
                    StringEquals: Succeeded
                  - Variable: $.Status
                    StringEquals: Succeeded With Warning
                Next: Wait For logs
              - Variable: $.Status
                StringEquals: Failed
                Next: Wait For logs Failed
            Default: Wait X Seconds Loop
          Wait For logs Failed:
            Type: Wait
            Seconds: 15
            Next: GetLogEvents Failed
          GetLogEventsSuccess:
            Type: Task
            Next: Success
            Parameters:
              LogGroupName.$: States.Format('/aws/vendedlogs/m2/{}/BatchJobLogs',$.ApplicationId)
              LogStreamName.$: States.Format('{}/{}/{}/PS010/SYSOUT',$.ExecutionId,$.JobId,$.JobName)
            Resource: arn:aws:states:::aws-sdk:cloudwatchlogs:getLogEvents
            OutputPath: $.Events[0:].Message
            Retry:
              - ErrorEquals:
                  - States.TaskFailed
                BackoffRate: 5
                IntervalSeconds: 10
                MaxAttempts: 2
          GetLogEvents Failed:
            Type: Task
            Next: Fail
            Parameters:
              LogGroupName.$: States.Format('/aws/vendedlogs/m2/{}/BatchJobLogs',$.ApplicationId)
              LogStreamName.$: States.Format('{}/{}/{}/PS010/SYSOUT',$.ExecutionId,$.JobId,$.JobName)
            Resource: arn:aws:states:::aws-sdk:cloudwatchlogs:getLogEvents
            OutputPath: $.Events[0:].Message
          Success:
            Type: Succeed
          Fail:
            Type: Fail
      TracingConfiguration:
        Enabled: true
      LoggingConfiguration:
        Level: ALL
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt M2BatchLogGroup.Arn

  M2StepFunctionScheduler:
    Type: AWS::StepFunctions::StateMachine
    DependsOn:
      - StepFunctionsM2SchedulerRolePolicies
      - StepFunctionsM2SchedulerRole
    Properties:
      StateMachineName:
        Fn::Join:
          - '-'
          - - Ref: M2ApplicationName
            - job-scheduler-flow
            - !GetAtt UniqueSuffix.Value
      RoleArn:
        Fn::GetAtt:
          - StepFunctionsM2SchedulerRole
          - Arn
      Definition:
        Comment: A description of my state machine
        StartAt: BATCHA00
        States:
          BATCHA00:
            Type: Task
            Resource: arn:aws:states:::states:startExecution.sync:2
            Parameters:
              StateMachineArn:
                Fn::GetAtt:
                  - M2StepFunctionsJobTemplate
                  - Arn
              Input:
                ApplicationId:
                  Fn::GetAtt:
                    - M2ApplicationMicroFocus
                    - ApplicationId
                JobName: BATCHA00
            Next: BATCHB00
          BATCHB00:
            Type: Task
            Resource: arn:aws:states:::states:startExecution.sync:2
            Parameters:
              StateMachineArn:
                Fn::GetAtt:
                  - M2StepFunctionsJobTemplate
                  - Arn
              Input:
                ApplicationId:
                  Fn::GetAtt:
                    - M2ApplicationMicroFocus
                    - ApplicationId
                JobName: BATCHB00
            Next: Parallel
          Parallel:
            Type: Parallel
            Branches:
              - StartAt: BATCHA04
                States:
                  BATCHA04:
                    Type: Task
                    Resource: arn:aws:states:::states:startExecution.sync:2
                    Parameters:
                      StateMachineArn:
                        Fn::GetAtt:
                          - M2StepFunctionsJobTemplate
                          - Arn
                      Input:
                        ApplicationId:
                          Fn::GetAtt:
                            - M2ApplicationMicroFocus
                            - ApplicationId
                        JobName: BATCHA04
                    End: true
              - StartAt: BATCHB04
                States:
                  BATCHB04:
                    Type: Task
                    Resource: arn:aws:states:::states:startExecution.sync:2
                    Parameters:
                      StateMachineArn:
                        Fn::GetAtt:
                          - M2StepFunctionsJobTemplate
                          - Arn
                      Input:
                        ApplicationId:
                          Fn::GetAtt:
                            - M2ApplicationMicroFocus
                            - ApplicationId
                        JobName: BATCHB04
                    End: true
            Next: BATCHC00
          BATCHC00:
            Type: Task
            Resource: arn:aws:states:::states:startExecution.sync:2
            Parameters:
              StateMachineArn:
                Fn::GetAtt:
                  - M2StepFunctionsJobTemplate
                  - Arn
              Input:
                ApplicationId:
                  Fn::GetAtt:
                    - M2ApplicationMicroFocus
                    - ApplicationId
                JobName: BATCHC00
            End: true
      TracingConfiguration:
        Enabled: true
      LoggingConfiguration:
        Level: ALL
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt M2BatchLogGroup.Arn

  M2EventBridgeJobTrigger:
    Type: AWS::Scheduler::Schedule
    Properties:
      Description: 'Time trigger for M2 Batch Job Flow'
      FlexibleTimeWindow:
        Mode: 'OFF'
      ScheduleExpression: at(2023-01-01T01:01:00)
      ScheduleExpressionTimezone: America/New_York
      State: DISABLED
      Target:
        Arn:
          Fn::GetAtt:
            - M2StepFunctionScheduler
            - Arn
        RoleArn:
          Fn::GetAtt:
            - StepFunctionsM2SchedulerRole
            - Arn

Outputs:

  M2BucketName:
    Description: 'm2 app bucket'
    Value: !Ref BucketName

  M2AppKey:
    Description: 's3 app key for m2 deployment'
    Value: !Ref AppKey

  M2EnvironmentId:
    Description: 'm2 environment id'
    Value: !GetAtt M2EnvironmentMicrofocus.EnvironmentId

  M2ApplicationId:
    Description: 'm2 application id'
    Value: !GetAtt M2ApplicationMicroFocus.ApplicationId

  M2AppDef:
    Description: 'm2 app def'
    Value: !GetAtt M2AppDef.Value

  M2DbName:
    Description: 'm2 db name'
    Value: !GetAtt M2DbName.Value

  M2Subnet1Ips:
    Description: 'm2 subnet 1 ip addresses'
    Value: !GetAtt M2Subnet1CidrBlock.Value

  M2Subnet2Ips:
    Description: 'm2 subnet 2 ip addresses'
    Value: !GetAtt M2Subnet2CidrBlock.Value
